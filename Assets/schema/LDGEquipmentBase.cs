

//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class LDGEquipment : LDGEquipmentBase {
	
	public LDGEquipment()
	{
		string attr;

		attr = "1";
		if(attr != null) { reload = float.Parse(attr); reloadExists = true; } 

	}
	
	
	public LDGEquipment(
			float dmgStructure,
			float dmgShields,
			float dmgArmor,
			float dmgPlanet,
			float range,
			float spread,
			float reload,
			float reloadCounter,
			float armor,
			float structure,
			float shields,
			float speed,
			float turning,
			int special,
			string name,
			int icon,
			int time,
			cVector3 position,
			cVector3 velocity,
			cVector3 rotation,
			bool beingDragged ) : this()
	{
		this.dmgStructure = dmgStructure;
		this.dmgStructureExists = true;

		this.dmgShields = dmgShields;
		this.dmgShieldsExists = true;

		this.dmgArmor = dmgArmor;
		this.dmgArmorExists = true;

		this.dmgPlanet = dmgPlanet;
		this.dmgPlanetExists = true;

		this.range = range;
		this.rangeExists = true;

		this.spread = spread;
		this.spreadExists = true;

		this.reload = reload;
		this.reloadExists = true;

		this.reloadCounter = reloadCounter;
		this.reloadCounterExists = true;

		this.armor = armor;
		this.armorExists = true;

		this.structure = structure;
		this.structureExists = true;

		this.shields = shields;
		this.shieldsExists = true;

		this.speed = speed;
		this.speedExists = true;

		this.turning = turning;
		this.turningExists = true;

		this.special = special;
		this.specialExists = true;

		this.name = name;
		this.nameExists = true;

		this.icon = icon;
		this.iconExists = true;

		this.time = time;
		this.timeExists = true;

		this.position = position;
		this.positionExists = true;

		this.velocity = velocity;
		this.velocityExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.beingDragged = beingDragged;
		this.beingDraggedExists = true;
	}

	

}




public class LDGEquipmentBase : ILD30Game {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);


	public object parent;
	public string xmlns;


	// XML Attributes
	public float dmgStructure;
	public bool dmgStructureExists;

	public float dmgShields;
	public bool dmgShieldsExists;

	public float dmgArmor;
	public bool dmgArmorExists;

	public float dmgPlanet;
	public bool dmgPlanetExists;

	public float range;
	public bool rangeExists;

	public float spread;
	public bool spreadExists;

	public float reload;
	public bool reloadExists;

	public float reloadCounter;
	public bool reloadCounterExists;

	public float armor;
	public bool armorExists;

	public float structure;
	public bool structureExists;

	public float shields;
	public bool shieldsExists;

	public float speed;
	public bool speedExists;

	public float turning;
	public bool turningExists;

	public int special;
	public bool specialExists;

	public string name;
	public bool nameExists;

	public int icon;
	public bool iconExists;

	public int time;
	public bool timeExists;

	public cVector3 position;
	public bool positionExists;

	public cVector3 velocity;
	public bool velocityExists;

	public cVector3 rotation;
	public bool rotationExists;

	public bool beingDragged;
	public bool beingDraggedExists;




	
	public void SetDmgStructure(float v) { dmgStructure = v; dmgStructureExists = true; } 
	public void SetDmgShields(float v) { dmgShields = v; dmgShieldsExists = true; } 
	public void SetDmgArmor(float v) { dmgArmor = v; dmgArmorExists = true; } 
	public void SetDmgPlanet(float v) { dmgPlanet = v; dmgPlanetExists = true; } 
	public void SetRange(float v) { range = v; rangeExists = true; } 
	public void SetSpread(float v) { spread = v; spreadExists = true; } 
	public void SetReload(float v) { reload = v; reloadExists = true; } 
	public void SetReloadCounter(float v) { reloadCounter = v; reloadCounterExists = true; } 
	public void SetArmor(float v) { armor = v; armorExists = true; } 
	public void SetStructure(float v) { structure = v; structureExists = true; } 
	public void SetShields(float v) { shields = v; shieldsExists = true; } 
	public void SetSpeed(float v) { speed = v; speedExists = true; } 
	public void SetTurning(float v) { turning = v; turningExists = true; } 
	public void SetSpecial(int v) { special = v; specialExists = true; } 
	public void SetName(string v) { name = v; nameExists = true; } 
	public void SetIcon(int v) { icon = v; iconExists = true; } 
	public void SetTime(int v) { time = v; timeExists = true; } 
	public void SetPosition(cVector3 v) { position = v; positionExists = true; } 
	public void SetVelocity(cVector3 v) { velocity = v; velocityExists = true; } 
	public void SetRotation(cVector3 v) { rotation = v; rotationExists = true; } 
	public void SetBeingDragged(bool v) { beingDragged = v; beingDraggedExists = true; } 


	public virtual void gaxb_unload()
	{

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Equipment");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("EquipmentExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("Equipments");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("LD30Games");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public virtual void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( LDGEquipment ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("dmgStructure");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { dmgStructure = float.Parse(attr); dmgStructureExists = true; } 
		
		attr = reader.GetAttribute("dmgShields");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { dmgShields = float.Parse(attr); dmgShieldsExists = true; } 
		
		attr = reader.GetAttribute("dmgArmor");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { dmgArmor = float.Parse(attr); dmgArmorExists = true; } 
		
		attr = reader.GetAttribute("dmgPlanet");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { dmgPlanet = float.Parse(attr); dmgPlanetExists = true; } 
		
		attr = reader.GetAttribute("range");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { range = float.Parse(attr); rangeExists = true; } 
		
		attr = reader.GetAttribute("spread");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { spread = float.Parse(attr); spreadExists = true; } 
		
		attr = reader.GetAttribute("reload");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "1"; }
		if(attr != null) { reload = float.Parse(attr); reloadExists = true; } 
		
		attr = reader.GetAttribute("reloadCounter");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { reloadCounter = float.Parse(attr); reloadCounterExists = true; } 
		
		attr = reader.GetAttribute("armor");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { armor = float.Parse(attr); armorExists = true; } 
		
		attr = reader.GetAttribute("structure");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { structure = float.Parse(attr); structureExists = true; } 
		
		attr = reader.GetAttribute("shields");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { shields = float.Parse(attr); shieldsExists = true; } 
		
		attr = reader.GetAttribute("speed");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { speed = float.Parse(attr); speedExists = true; } 
		
		attr = reader.GetAttribute("turning");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { turning = float.Parse(attr); turningExists = true; } 
		
		attr = reader.GetAttribute("special");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { special = int.Parse(attr); specialExists = true; } 
		
		attr = reader.GetAttribute("name");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { name = attr; nameExists = true; } 
		
		attr = reader.GetAttribute("icon");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { icon = int.Parse(attr); iconExists = true; } 
		
		attr = reader.GetAttribute("time");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { time = int.Parse(attr); timeExists = true; } 
		
		attr = reader.GetAttribute("position");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { position = attr; positionExists = true; } 
		
		attr = reader.GetAttribute("velocity");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { velocity = attr; velocityExists = true; } 
		
		attr = reader.GetAttribute("rotation");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { rotation = attr; rotationExists = true; } 
		
		attr = reader.GetAttribute("beingDragged");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { beingDragged = bool.Parse(attr); beingDraggedExists = true; } 
		

	}
	
	
	
	
	
	
	
	public virtual void gaxb_appendXMLAttributes(StringBuilder sb)
	{

		if(dmgStructureExists) { sb.AppendFormat (" {0}=\"{1}\"", "dmgStructure", dmgStructure.ToString ("0.##")); }
		if(dmgShieldsExists) { sb.AppendFormat (" {0}=\"{1}\"", "dmgShields", dmgShields.ToString ("0.##")); }
		if(dmgArmorExists) { sb.AppendFormat (" {0}=\"{1}\"", "dmgArmor", dmgArmor.ToString ("0.##")); }
		if(dmgPlanetExists) { sb.AppendFormat (" {0}=\"{1}\"", "dmgPlanet", dmgPlanet.ToString ("0.##")); }
		if(rangeExists) { sb.AppendFormat (" {0}=\"{1}\"", "range", range.ToString ("0.##")); }
		if(spreadExists) { sb.AppendFormat (" {0}=\"{1}\"", "spread", spread.ToString ("0.##")); }
		if(reloadExists) { sb.AppendFormat (" {0}=\"{1}\"", "reload", reload.ToString ("0.##")); }
		if(reloadCounterExists) { sb.AppendFormat (" {0}=\"{1}\"", "reloadCounter", reloadCounter.ToString ("0.##")); }
		if(armorExists) { sb.AppendFormat (" {0}=\"{1}\"", "armor", armor.ToString ("0.##")); }
		if(structureExists) { sb.AppendFormat (" {0}=\"{1}\"", "structure", structure.ToString ("0.##")); }
		if(shieldsExists) { sb.AppendFormat (" {0}=\"{1}\"", "shields", shields.ToString ("0.##")); }
		if(speedExists) { sb.AppendFormat (" {0}=\"{1}\"", "speed", speed.ToString ("0.##")); }
		if(turningExists) { sb.AppendFormat (" {0}=\"{1}\"", "turning", turning.ToString ("0.##")); }
		if(specialExists) { sb.AppendFormat (" {0}=\"{1}\"", "special", special); }
		if(nameExists) { sb.AppendFormat (" {0}=\"{1}\"", "name", name); }
		if(iconExists) { sb.AppendFormat (" {0}=\"{1}\"", "icon", icon); }
		if(timeExists) { sb.AppendFormat (" {0}=\"{1}\"", "time", time); }
		if(positionExists) { sb.AppendFormat (" {0}=\"{1}\"", "position", position); }
		if(velocityExists) { sb.AppendFormat (" {0}=\"{1}\"", "velocity", velocity); }
		if(rotationExists) { sb.AppendFormat (" {0}=\"{1}\"", "rotation", rotation); }
		if(beingDraggedExists) { sb.AppendFormat (" {0}=\"{1}\"", "beingDragged", beingDragged.ToString().ToLower()); }

	}
	
	public virtual void gaxb_appendXMLSequences(StringBuilder sb)
	{


	}
	
	public virtual void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "Equipment");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Equipment");
		}
	}
}
