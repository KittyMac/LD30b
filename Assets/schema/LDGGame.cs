

//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//
using System.Collections.Generic;
using System;
using UnityEngine;
using System.Diagnostics;

public partial class LDGGame : LDGGameBase {

	public float averageUserDecisionTime = 4000;

	public static LDGGame CreateGame() {
		LDGGame game = new LDGGame();
		game.SetSaveGameTag (5);


		// 0) Load all equipment
		List<LDGEquipment> allEquipment = LDGAllEquipment.GetAllEquipment ();

		// 1) put random copies of all equipment into game.Equipment (this is the stuff floating in space)
		// 1a) Should at least be one of everything
		foreach (LDGEquipment equipment in allEquipment) {
			game.AddSpaceEquipment (equipment);
		}

		// 1b) Now add more random copies for fun
		int copies = UnityEngine.Random.Range (allEquipment.Count * 3, allEquipment.Count * 6);
		for (int i = 0; i < copies; i++) {
			LDGEquipment equipment = allEquipment [UnityEngine.Random.Range (0, allEquipment.Count)];
			game.AddSpaceEquipment (equipment);
		}


		// 2) add the planets
		LDGPlanet redPlanet = new LDGPlanet(100.0f, 0.0f);
		LDGPlanet bluePlanet = new LDGPlanet(100.0f, 0.0f);
		redPlanet.parent = game;
		bluePlanet.parent = game;
		game.Planets.Add (bluePlanet);
		game.Planets.Add (redPlanet);

		return game;
	}


	protected Stopwatch playerFindWatch = null;

	public void AddSpaceEquipment(LDGEquipment equipment) {
		LDGEquipment clone = equipment.Clone ();
		clone.position = new cVector3 (UnityEngine.Random.Range (96, 750), UnityEngine.Random.Range (38, 532), 0);
		clone.velocity = new cVector3 (UnityEngine.Random.Range (-6, 6), UnityEngine.Random.Range (-6, 6), 0);
		Equipments.Add (clone);
	}

	public LDGPlanet redPlanet()
	{
		return Planets [1] as LDGPlanet;
	}

	public LDGPlanet bluePlanet()
	{
		return Planets [0] as LDGPlanet;
	}

	public bool AddEquipmentToPlanetBuildQueue(LDGEquipment e, LDGPlanet p) {

		if (p.Equipments.Count > 13) {
			return false;
		}

		if (p == bluePlanet ()) {
			playerFindWatch.Stop ();
			averageUserDecisionTime = (averageUserDecisionTime + (float)playerFindWatch.Elapsed.TotalMilliseconds) / 2.0f;
			playerFindWatch.Reset ();
			playerFindWatch.Start ();
		}

		// 0 remove the equipment from space
		Equipments.Remove (e);

		// 1 add it to the planet
		p.Equipments.Add (e);

		if (p == redPlanet ()) {
			e.sprite.spriteRenderer.color = new Color (1.0f, 0.5f, 0.5f, 1.0f);
		} else {
			e.sprite.spriteRenderer.color = new Color (0.5f, 0.5f, 1.0f, 1.0f);
		}
		e.beingDragged = false;

		return true;
	}

	public bool BuildCurrentShipForPlanet(LDGPlanet p) {

		// Not allowed to build empty ships
		if (p.Equipments.Count == 0) {
			return false;
		}

		LDGShip ship = new LDGShip();
		Vector3 exitPos = new Vector3 (934,28,0);

		ship.player = 0;

		if (p == redPlanet ()) {
			ship.player = 1;
			exitPos = new Vector3 (25,583,0);
		}

		ship.Equipments.AddRange (p.Equipments);
		p.Equipments.Clear ();

		ship.InitCombatValues ();

		float anim = 0.0f;
		foreach (LDGEquipment e in ship.Equipments) {
			e.RemoveSprite (anim, exitPos);
			anim += 1.0f / ship.Equipments.Count;
		}

		p.AddShipToBuild (ship);

		return true;
	}

	public void AdvanceGame (PUGameObject ShipsContainer, PUGameObject EquipmentContainer){

		if (playerFindWatch == null) {
			playerFindWatch = Stopwatch.StartNew ();
		}

		foreach (LDGPlanet p in Planets) {
			p.AdvanceBuildQueue (ShipsContainer);
		}

		foreach (LDGEquipment e in Equipments) {
			Vector3 v = e.sprite.gameObject.transform.localPosition;
			v.x += e.velocity.x;
			v.y += e.velocity.y;
			e.sprite.gameObject.transform.localPosition = v;
			e.velocity.x *= 0.95f;
			e.velocity.y *= 0.95f;
		}

		PerformShipMovementForPlayer(0);
		PerformShipMovementForPlayer(1);

		// Remove any casualties
		for(int i = Ships.Count-1; i>= 0; i--){
			LDGShip ship = Ships [i] as LDGShip;
			if (ship.structure <= 0) {

				// Remove the equipment from this ship, put it back into space
				foreach (LDGEquipment e in ship.Equipments) {
					Equipments.Add (e);

					Vector3 p = ship.sprite.gameObject.transform.localPosition;
					e.position = new cVector3(p.x, p.y, p.z);
					e.velocity = new cVector3 (UnityEngine.Random.Range (-6, 6), UnityEngine.Random.Range (-6, 6), 0);

					e.GetSprite (EquipmentContainer);
				}

				ship.sprite.unload ();
				Ships.Remove (ship);

				SoundController controller = PUCode.GetSingletonByName ("SoundController") as SoundController;
				controller.Play (controller.weaponsFire);
			}
		}

		// Wrap all sprite positions
		foreach(LDGEquipment e in Equipments)
		{
			if (e.beingDragged == false) {
				WrapSpriteIfNecessary (e.sprite);
			}
		}
		foreach(LDGShip ship in Ships)
		{
			WrapSpriteIfNecessary (ship.sprite);
		}


	}

	public void PerformShipMovementForPlayer(int p){

		Vector3 targetPosition = new Vector3 (484,351, 0);

		// Find the "weakest" target of the other player; ideally, weakest target of the same class ship
		LDGShip targetShip = null;
		foreach (LDGShip ship in Ships) {
			if (ship.player != p) {
				if (targetShip == null || ship.TotalHealth () < targetShip.TotalHealth ()) {
					targetShip = ship;
				}
			}
		}

		if (targetShip != null) {
			targetPosition = targetShip.sprite.gameObject.transform.localPosition;
		}

		// We need to focus the other player's planet
		if (targetShip == null) {
			if (p == 0) {
				targetPosition = redPlanet ().sprite.gameObject.transform.localPosition;
			} else {
				targetPosition = bluePlanet ().sprite.gameObject.transform.localPosition;
			}
		}

		foreach (LDGShip ship in Ships) {
			if (ship.player == p) {


				// Determine whether turning left, going straight, or going right gets us closer to our target
				float centerRot = ship.sprite.gameObject.transform.localEulerAngles.z;
				float leftRot = ship.sprite.gameObject.transform.localEulerAngles.z + ship.TurnRate();
				float rightRot = ship.sprite.gameObject.transform.localEulerAngles.z - ship.TurnRate();


				float vel = ship.MaxVelocity ();
				if (targetShip == null) {
					if( Vector3.Distance(ship.sprite.gameObject.transform.localPosition, targetPosition) < 100.0f){
						vel /= 3.0f;
					}
				}

				Vector3 vector = new Vector3(vel * Time.fixedDeltaTime, 0.0f, 0.0f);
				Vector3 currentPos = ship.sprite.gameObject.transform.localPosition;
				Vector3 rightPos = currentPos + RotateZ(rightRot, vector);
				Vector3 leftPos = currentPos + RotateZ(leftRot, vector);
				Vector3 centerPos = currentPos + RotateZ(centerRot, vector);

				float leftDist = Vector3.Distance (leftPos, targetPosition);
				float rightDist = Vector3.Distance (rightPos, targetPosition);
				float centerDist = Vector3.Distance (centerPos, targetPosition);

				if (leftDist < centerDist && leftDist < rightDist) {
					ship.sprite.gameObject.transform.localEulerAngles = new Vector3 (0, 0, leftRot);
					ship.sprite.gameObject.transform.localPosition = leftPos;
				} else if (rightDist < centerDist && rightDist < leftDist) {
					ship.sprite.gameObject.transform.localEulerAngles = new Vector3 (0, 0, rightRot);
					ship.sprite.gameObject.transform.localPosition = rightPos;
				} else {
					ship.sprite.gameObject.transform.localEulerAngles = new Vector3 (0, 0, centerRot);
					ship.sprite.gameObject.transform.localPosition = centerPos;
				}


				if (targetShip != null) {
					if (!FireAllAvailableWeapons (ship, targetShip)) {
						FireAllAvailableWeaponsAtPlanet (ship);
					}
				} else {
					// if we have no target, are we in range to shoot the planet of the enemy?
					FireAllAvailableWeaponsAtPlanet (ship);
				}
			}
		}
	}

	private Vector3 RotateZ(float angle, Vector3 p)
	{
		float c = Mathf.Cos(angle*0.01745329252f);
		float s = Mathf.Sin(angle*0.01745329252f);
		return new Vector3(p.x*c-p.y*s, p.x*s+p.y*c, p.z);
	}

	private void WrapSpriteIfNecessary(PUSprite sprite)
	{
		Vector3 pos = sprite.gameObject.transform.localPosition;

		while (pos.x > 960) {
			pos.x -= 960;
		}
		while (pos.x < 0) {
			pos.x += 960;
		}
		while (pos.y > 600) {
			pos.y -= 600;
		}
		while (pos.y < 0) {
			pos.y += 600;
		}

		sprite.gameObject.transform.localPosition = pos;
	}

	public bool FireAllAvailableWeapons(LDGShip fromShip, LDGShip toShip) {
		float d = Vector3.Distance(fromShip.sprite.gameObject.transform.localPosition, toShip.sprite.gameObject.transform.localPosition);
		bool didFireWeapons = false;

		foreach (LDGEquipment e in fromShip.Equipments) {
			// Are we in range? (Are we even a weapon?)
			if (e.range > 0) {

				if (e.range <= d) {
					// hmm... our preferred target is not in range.  We should shoot someone else...
					foreach (LDGShip ship in Ships) {
						if (ship.player == toShip.player) {
							float newD = Vector3.Distance(fromShip.sprite.gameObject.transform.localPosition, ship.sprite.gameObject.transform.localPosition);
							if (e.range > newD) {
								d = newD;
								toShip = ship;
								break;
							}
						}
					}
				}

				if (e.range > d) {
					e.reloadCounter -= Time.deltaTime;
					// Have I reloaded?
					if (e.reloadCounter <= 0) {
						// Fire my weapon, reset the reload counter
						toShip.PerformDamageFromWeapon (e);
						e.reloadCounter = e.reload + UnityEngine.Random.Range(-0.5f, 0.5f);

						if (didFireWeapons == false) {
							GameController.PerformWeaponEffect (e, fromShip, toShip);
						}

						didFireWeapons = true;
					}
				}
			}
		}

		return didFireWeapons;
	}

	public void FireAllAvailableWeaponsAtPlanet(LDGShip fromShip) {

		LDGPlanet toPlanet = redPlanet ();
		if (fromShip.player == 1) {
			toPlanet = bluePlanet ();
		}

		float d = Vector3.Distance(fromShip.sprite.gameObject.transform.localPosition, toPlanet.sprite.gameObject.transform.localPosition);

		foreach (LDGEquipment e in fromShip.Equipments) {
			// Are we in range? (Are we even a weapon?)
			if (e.range > 0) {
				if (e.range > d) {
					e.reloadCounter -= Time.deltaTime;
					// Have I reloaded?
					if (e.reloadCounter <= 0) {
						// Fire my weapon, reset the reload counter
						toPlanet.PerformDamageFromWeapon (e);
						e.reloadCounter = e.reload + UnityEngine.Random.Range(-0.5f, 0.5f);

						GameController.PerformWeaponEffect (e, fromShip, toPlanet);
					}
				}
			}
		}
	}
}

