

//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//
using UnityEngine;
using System.Net.Sockets;

public partial class LDGPlanet : LDGPlanetBase {

	public PUSprite sprite;

	public string buildTimeAsString() {
		if(Ships.Count == 0){
			return "--";
		}

		return string.Format("{0:0.0}s", buildTime);
	}

	public string buildQueueAsString() {
		if(Ships.Count == 0){
			return "No Ships To Build";
		}

		if(Ships.Count == 1){
			return "Building 1 Ship";
		}

		return string.Format("Building {0} Ships", Ships.Count);
	}

	public string estimatedBuildTimeAsString()
	{
		return string.Format("{0:0}s", LDGShip.buildTimeForEquipment (Equipments));
	}

	public void PerformDamageFromWeapon(LDGEquipment e){
		if (health > 0) {
			health -= e.dmgPlanet;
			return;
		}
	}

	public void AdvanceBuildQueue (PUGameObject shipsContainer) {
		if (Ships.Count > 0) {
			LDGGame game = parent as LDGGame;

			buildTime -= Time.deltaTime;
			if (buildTime <= 0) {
				LDGShip shipToProduce = Ships [0] as LDGShip;

				game.Ships.Add (shipToProduce);

				Vector3 pos = new Vector3 (857, 18, 0);

				if (shipToProduce.player == 1) {
					pos = new Vector3 (97,586, 0);
				}

				shipToProduce.sprite = new PUSprite (shipToProduce.TexturePath(), new cVector3(0,0,0), 40.0f, new cRect (0, 0, 0, 0));
				shipToProduce.sprite.loadIntoPUGameObject (shipsContainer);
				shipToProduce.sprite.gameObject.transform.localPosition = pos;

				if (shipToProduce.player == 0) {
					shipToProduce.sprite.gameObject.transform.localEulerAngles = new Vector3(0, 0, 180);
				}

				Ships.Remove (shipToProduce);

				if (Ships.Count > 0) {
					LDGShip ship = Ships [0] as LDGShip;
					buildTime = ship.buildTime ();
				}
			}
		}
	}

	public void AddShipToBuild(LDGShip ship){
		if (Ships.Count == 0) {
			buildTime = ship.buildTime ();
		}
		Ships.Add (ship);
	}
}
