

//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class LDGPlanet : LDGPlanetBase {
	
	public LDGPlanet()
	{
	}
	
	
	public LDGPlanet(
			float health,
			float buildTime ) : this()
	{
		this.health = health;
		this.healthExists = true;

		this.buildTime = buildTime;
		this.buildTimeExists = true;
	}

	

}




public class LDGPlanetBase : ILD30Game {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);


	public object parent;
	public string xmlns;


	// XML Attributes
	public float health;
	public bool healthExists;

	public float buildTime;
	public bool buildTimeExists;




	// XML Sequences
	public List<object> Ships = new List<object>();
	
	public List<object> Equipments = new List<object>();
	

	
	public void SetHealth(float v) { health = v; healthExists = true; } 
	public void SetBuildTime(float v) { buildTime = v; buildTimeExists = true; } 


	public virtual void gaxb_unload()
	{

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Planet");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("PlanetExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("Planets");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("LD30Games");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public virtual void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( LDGPlanet ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("health");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { health = float.Parse(attr); healthExists = true; } 
		
		attr = reader.GetAttribute("buildTime");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { buildTime = float.Parse(attr); buildTimeExists = true; } 
		

	}
	
	
	
	
	
	
	
	public virtual void gaxb_appendXMLAttributes(StringBuilder sb)
	{

		if(healthExists) { sb.AppendFormat (" {0}=\"{1}\"", "health", health.ToString ("0.##")); }
		if(buildTimeExists) { sb.AppendFormat (" {0}=\"{1}\"", "buildTime", buildTime.ToString ("0.##")); }

	}
	
	public virtual void gaxb_appendXMLSequences(StringBuilder sb)
	{

		MethodInfo mInfo;		foreach(object o in Ships) { mInfo = o.GetType().GetMethod("gaxb_appendXML"); if(mInfo != null) { mInfo.Invoke (o, new[] { sb }); } else { sb.AppendFormat ("<{0}>{1}</{0}>", "Ship", o); } }
	
		foreach(object o in Equipments) { mInfo = o.GetType().GetMethod("gaxb_appendXML"); if(mInfo != null) { mInfo.Invoke (o, new[] { sb }); } else { sb.AppendFormat ("<{0}>{1}</{0}>", "Equipment", o); } }
	

	}
	
	public virtual void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "Planet");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Planet");
		}
	}
}
